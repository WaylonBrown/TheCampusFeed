//
//  TableCell.m
//  TheCampusFeed
//
//  Created by Patrick Sheehan on 5/13/14.
//  Copyright (c) 2014 TheCampusFeed. All rights reserved.
//

#import "TableCell.h"
#import "Post.h"
#import "Vote.h"
#import "PostsViewController.h"
#import "Shared.h"
#import "Tag.h"
#import "Comment.h"

@implementation TableCell

#pragma mark - Autogenerated Stubs

- (BOOL)assignmentSuccessWith:(NSObject *)obj
{
    if (obj == nil)
    {
        NSLog(@"Error assigning properties to a TableCell");
        return NO;
    }
    
    return YES;
}
- (void)awakeFromNib
{
    // Initialization code
    
    UIImage *image = [UIImage imageNamed:@"card_without_9patch.png"];
    UIImage *stretchableBackground = [image resizableImageWithCapInsets:UIEdgeInsetsMake(3, 5, 8, 6) resizingMode:UIImageResizingModeStretch];
    self.backgroundImageView.image = stretchableBackground;
    
    // Set font styles
    [self.messageLabel      setFont:CF_FONT_LIGHT(17)];
    [self.commentCountLabel setFont:CF_FONT_MEDIUM(12)];
    [self.ageLabel          setFont:CF_FONT_MEDIUM(12)];
    [self.scoreLabel        setFont:CF_FONT_BOLD(13)];
    [self.collegeLabel      setFont:CF_FONT_ITALIC(14)];
    
}
- (void)layoutSubviews
{
    [super layoutSubviews];
}
- (void)setSelected:(BOOL)selected animated:(BOOL)animated
{
    [super setSelected:selected animated:animated];
    
    // Configure the view for the selected state
}

#pragma mark - Data Population

- (void)assignWith:(NSObject<PostAndCommentProtocol, CFModelProtocol> *)obj IsNearCollege:(BOOL)isNearby WithMessageHeight:(float)height;
{
    self.isNearCollege = isNearby;
    [self.gpsIconImageView setHidden:(!isNearby)];
}

#pragma mark - Actions

- (IBAction)upVotePressed:(id)sender
{   // User clicked upvote button
    
    id<ChildCellDelegate> strongDelegate = self.delegate;
    
    Vote *existingVote = [self.object getVote];
    
    Vote *newVote = [[Vote alloc] initWithVoteId:-1 WithParentId:[[self.object getID] longValue] WithUpvoteValue:YES AsVotableType:[self.object getType]];
    [newVote setCollegeId:[[self.object getCollege_id] longValue]];
    
    if (existingVote == nil)
    {   // User is submitting a normal upvote
    
        [self.object setVote:newVote];
        [self.object incrementScore];
        [self updateVoteButtons];
        [strongDelegate castVote:newVote];
    }
    else
    {
        if (existingVote.upvote == true)
        {   // User is undoing an existing upvote; cancel it
            [self.object setVote:nil];
            [self.object decrementScore];
            [self updateVoteButtons];
            [strongDelegate cancelVote:existingVote];
        }
        else if (existingVote.upvote == false)
        {   // User is changing their downvote to an upvote;
            // cancel downvote and cast an upvote
            [self.object setVote:newVote];
            [self.object incrementScore];
            [self.object incrementScore];
            [self updateVoteButtons];
            [strongDelegate cancelVote:existingVote];
            [strongDelegate castVote:newVote];
        }
    }
}
- (IBAction)downVotePresed:(id)sender
{   // User clicked downvote button
    id<ChildCellDelegate> strongDelegate = self.delegate;

    if (!self.isNearCollege)
    {
        [strongDelegate displayCannotVote];
        return;
    }
    
    Vote *existingVote = [self.object getVote];
    Vote *newVote = [[Vote alloc] initWithVoteId:-1 WithParentId:[[self.object getID] longValue]
                                    WithUpvoteValue:NO
                                      AsVotableType:[self.object getType]];
    [newVote setCollegeId:[[self.object getCollege_id] longValue]];
    
    if (existingVote == nil)
    {   // User is submitting a normal downvote

        [self.object setVote:newVote];
        [self.object decrementScore];
        [self updateVoteButtons];
        [strongDelegate castVote:newVote];
    }
    else
    {
        if (existingVote.upvote == false)
        {   // User is undoing an existing downvote; cancel it
            [self.object setVote:nil];
            [self.object incrementScore];
            [self updateVoteButtons];
            [strongDelegate cancelVote:existingVote];
        }
        else if (existingVote.upvote == true)
        {   // User is changing their upvote to a downvote
            // cancel upvote and cast an downvote
            [self.object setVote:newVote];
            [self.object decrementScore];
            [self.object decrementScore];
            [self updateVoteButtons];
            [strongDelegate cancelVote:existingVote];
            [strongDelegate castVote:newVote];
        }
    }
    
}
- (void)attributedLabel:(TTTAttributedLabel *)label didSelectLinkWithURL:(NSURL *)url
{
    NSString *tagMessage = [url absoluteString];
    [self.delegate didSelectTag:tagMessage];
}

#pragma mark - Helper Methods

- (void)populateImageViewFromUrl:(NSString *)imgURL
{
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:imgURL]];
        
        //set your image on main thread.
        dispatch_async(dispatch_get_main_queue(), ^{
            [self.pictureView setImage:[UIImage imageWithData:data]];
        });    
    });
}
- (NSString *)getAgeLabelString:(NSDate *)creationDate
{   // return string indicating how long ago the post was created
    
    if (creationDate == nil) return @"";
        
    int seconds = [[NSDate date] timeIntervalSinceDate:creationDate];
    int minutes = seconds / 60;
    int hours = minutes / 60;
    int days = hours / 24;

    if (days > 1)
    {
        return [NSString stringWithFormat:@"%d days ago", days];
    }
    else if (days == 1)
    {
        return @"Yesterday";
    }
    else if (hours > 1)
    {
        return [NSString stringWithFormat:@"%d hours ago", hours];
    }
    else if (hours == 1)
    {
        return @"One hour ago";
    }
    else if (minutes > 1)
    {
        return [NSString stringWithFormat:@"%d minutes ago", minutes];
    }
    else if (minutes == 1)
    {
        return @"One minute ago";
    }
    return [NSString stringWithFormat:@"%d seconds ago", seconds];
}
- (NSString *)getCommentLabelString
{   // Gets a string for the comment count label if this cell represents a Post
    if ([self.object class] == [Post class])
    {
        NSNumber *count = ((Post *)self.object).comment_count;
        long countLongValue = [count longValue];
        return [NSString stringWithFormat:@"%ld comments",
                countLongValue];
    }
    return @"";
}
- (void)findHashTags
{   // parse cell's message label to assign links to hashtagged words
    [self.messageLabel setDelegate:self];
    NSCharacterSet *acceptableSet = [NSCharacterSet characterSetWithCharactersInString:@"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM0123456789#_"];
    NSCharacterSet *unacceptableSet = [acceptableSet invertedSet];
    NSArray *words = [self.messageLabel.text componentsSeparatedByCharactersInSet:unacceptableSet];
    
    for (NSString *word in words)
    {
        if ([Tag withMessageIsValid:word])
        {
            NSRange range = [self.messageLabel.text rangeOfString:word];
            
            NSArray *keys = [[NSArray alloc] initWithObjects:(id)kCTForegroundColorAttributeName, (id)kCTUnderlineStyleAttributeName,  nil];
            NSArray *objects = [[NSArray alloc] initWithObjects:[Shared getCustomUIColor:CF_LIGHTBLUE],[NSNumber numberWithInt:kCTUnderlineStyleNone], nil];
            NSDictionary *linkAttributes = [[NSDictionary alloc] initWithObjects:objects forKeys:keys];
            
            self.messageLabel.linkAttributes = linkAttributes;
            self.messageLabel.activeLinkAttributes = linkAttributes;
            
            [self.messageLabel addLinkToURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@", word]]
                                  withRange:range];
        }
    }
}
- (void)updateVoteButtons
{   // assign appropriate arrow colors (based on user's vote)
    Vote* vote = [self.object getVote];

    if (vote == nil)
    {
        [self.upVoteButton setSelected:NO];
        [self.downVoteButton setSelected:NO];
    }
    else if (vote.upvote == NO)
    {
        [self.upVoteButton setSelected:NO];
        [self.downVoteButton setSelected:YES];
    }
    else if (vote.upvote == YES)
    {
        [self.upVoteButton setSelected:YES];
        [self.downVoteButton setSelected:NO];
    }

    [self.scoreLabel setText:[NSString stringWithFormat:@"%ld", [[self.object getScore] longValue]]];
}

#pragma mark - Protocol Methods

- (CGFloat)getMessageHeight
{
    return LARGE_CELL_MIN_LABEL_HEIGHT;
}
- (CGFloat)getCellHeight
{
    return DEFAULT_CELL_HEIGHT;
}
+ (CGFloat)getMessageHeight:(NSString *)text
{
    float height = LARGE_CELL_MIN_LABEL_HEIGHT;
    if (text != nil && ![text isEqualToString:@""])
    {
        
        NSStringDrawingContext *ctx = [NSStringDrawingContext new];
        NSAttributedString *aString = [[NSAttributedString alloc] initWithString:text];
        UITextView *calculationView = [[UITextView alloc] initWithFrame:CGRectMake(0, 0, LARGE_CELL_LABEL_WIDTH, 2000.0f)];
        [calculationView setAttributedText:aString];
        
        
        CGRect textRect = [calculationView.text
                           boundingRectWithSize:calculationView.frame.size
                           options:NSStringDrawingUsesLineFragmentOrigin
                           attributes:@{NSFontAttributeName:CF_FONT_LIGHT(16)}
                           context:ctx];
        
        height = textRect.size.height + MESSAGE_HEIGHT_TOP_CUSHION;
    }
    
    return MAX(height, LARGE_CELL_MIN_LABEL_HEIGHT);
}
+ (CGFloat)getCellHeight:(NSObject *)obj
{
    return DEFAULT_CELL_HEIGHT;
}
- (void)displayCannotVote
{
    
}

@end
