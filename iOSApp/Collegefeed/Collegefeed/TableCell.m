//
//  TableCell.m
//  Collegefeed
//
//  Created by Patrick Sheehan on 5/13/14.
//  Copyright (c) 2014 Appuccino. All rights reserved.
//

#import "TableCell.h"
#import "Post.h"
#import "Vote.h"
#import "PostsViewController.h"
#import "ChildCellDelegate.h"
#import "Shared.h"

@implementation TableCell

#pragma mark - Autogenerated Stubs

- (void)awakeFromNib
{
    // Initialization code
    
    
    // TODO: Keep trying ways to speed up this shadow rendering
    UIBezierPath *path = [UIBezierPath bezierPathWithRect:self.enclosingView.bounds];
    self.enclosingView.layer.masksToBounds = NO;
    self.enclosingView.layer.cornerRadius = 2;
    self.enclosingView.layer.shadowOffset = CGSizeMake(0, 1);
    self.enclosingView.layer.shadowRadius = 2;
    self.enclosingView.layer.shadowOpacity = 0.5;
    self.enclosingView.layer.shadowPath = path.CGPath;
    
    // Set font styles
    [self.messageLabel      setFont:CF_FONT_LIGHT(16)];
    [self.commentCountLabel setFont:CF_FONT_MEDIUM(12)];
    [self.ageLabel          setFont:CF_FONT_MEDIUM(12)];
    [self.scoreLabel        setFont:CF_FONT_BOLD(12)];
    [self.collegeLabel      setFont:CF_FONT_ITALIC(14)];

}
- (void)layoutSubviews
{
    [super layoutSubviews];

}
- (void)setSelected:(BOOL)selected animated:(BOOL)animated
{
    [super setSelected:selected animated:animated];
    
    // Configure the view for the selected state
}

#pragma mark - Data Population

- (void)assign:(NSObject<PostAndCommentProtocol, CFModelProtocol> *)obj;
{   // configure view of the cell according to obj's properties
    
    if (obj == nil)
    {
        [NSException raise:@"Error assigning properties to table cell"
                    format:@"Cell does not have a valid Votable reference"];
        return;
    }

    [self setObject:obj];
    
    // assign cell's plain text labels
    [self.messageLabel      setText:[obj getMessage]];
    [self.commentCountLabel setText:[self getCommentLabelString]];
    [self.ageLabel          setText:[self getAgeAsString:[obj getCreatedAt]]];
    
    if ([obj getType] == COMMENT)
    {
        [self setDividerView:nil];
        [self setCollegeLabel:nil];
    }
    else
    {
        [self.scoreLabel        setText:[NSString stringWithFormat:@"%lu", [obj getScore]]];
        [self.collegeLabel      setText:[obj getCollegeName]];
    }
    
    // Parse message for Tags
    [self findHashTags];

    // assign arrow colors according to user's vote
    [self updateVoteButtons];
    
    [self.gpsIconImageView setHidden:(!self.userIsNearCollege)];
    
}

#pragma mark - Actions

- (IBAction)upVotePressed:(id)sender
{   // User clicked upvote button
    Vote *vote = [[Vote alloc] initWithVotableID:[self.object getID]
                                 withUpvoteValue:YES
                                   asVotableType:[self.object getType]];

    [vote setCollegeId:[self.object getCollegeID]];
    [self.object setVote:vote];
    [self updateVoteButtons];
    
    id<ChildCellDelegate> strongDelegate = self.delegate;
    [strongDelegate castVote:vote];
}
- (IBAction)downVotePresed:(id)sender
{   // User clicked downvote button
    Vote *vote = [[Vote alloc] initWithVotableID:[self.object getID]
                                 withUpvoteValue:NO
                                   asVotableType:[self.object getType]];
    
    [vote setCollegeId:[self.object getCollegeID]];
    [self.object setVote:vote];
    [self updateVoteButtons];
    
    id<ChildCellDelegate> strongDelegate = self.delegate;
    [strongDelegate castVote:vote];
}
- (void)attributedLabel:(TTTAttributedLabel *)label didSelectLinkWithURL:(NSURL *)url
{
    NSString             *tagMessage = [url absoluteString];
    MasterViewController *masterView        = (MasterViewController*)self.delegate;
    
    PostsViewController  *controller = [[PostsViewController alloc] initAsType:TAG_VIEW
                                                            withDataController:masterView.dataController];
    [controller setTagMessage:tagMessage];
    
    if (masterView.dataController.nearbyColleges.count > 0)
    {
        [controller placeCreatePost];
    }
    else
    {
        controller.navigationItem.rightBarButtonItem = nil;
    }
    [masterView.navigationController pushViewController:controller
                                        animated:YES];
}

#pragma mark - Helper Methods

- (NSString *)getAgeAsString:(NSDate *)creationDate
{   // return string indicating how long ago the post was created
    
    if (creationDate == nil) return @"";
        
    int seconds = [[NSDate date] timeIntervalSinceDate:creationDate];
    int minutes = seconds / 60;
    int hours = minutes / 60;
    int days = hours / 24;

    if (days > 1)
    {
        return [NSString stringWithFormat:@"%d days ago", days];
    }
    else if (days == 1)
    {
        return @"Yesterday";
    }
    else if (hours > 1)
    {
        return [NSString stringWithFormat:@"%d hours ago", hours];
    }
    else if (hours == 1)
    {
        return @"One hour ago";
    }
    else if (minutes > 1)
    {
        return [NSString stringWithFormat:@"%d minutes ago", minutes];
    }
    else if (minutes == 1)
    {
        return @"One minute ago";
    }
    return [NSString stringWithFormat:@"%d seconds ago", seconds];
}
- (NSString *)getCommentLabelString
{   // Gets a string for the comment count label if this cell represents a Post
    if ([self.object class] == [Post class])
    {
        return [NSString stringWithFormat:@"%d comments",
                (int)((Post*)self.object).commentCount];
    }
    return @"";
}
- (void)findHashTags
{   // parse cell's message label to assign links to hashtagged words
    [self.messageLabel setDelegate:self];
    NSArray *words = [self.messageLabel.text componentsSeparatedByString:@" "];
    for (NSString *word in words)
    {
        if ([word hasPrefix:@"#"])
        {

            NSRange range = [self.messageLabel.text rangeOfString:word];
            
            [self.messageLabel addLinkToURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@", word]]
                                  withRange:range];
        }
    }

}
- (void)updateVoteButtons
{   // assign appropriate arrow colors (based on user's vote)
    Vote* vote = [self.object getVote];
    UIImage *regularUp      = [UIImage imageNamed:@"arrowup.png"];
    UIImage *regularDown    = [UIImage imageNamed:@"arrowdown.png"];
    UIImage *selectedUp     = [UIImage imageNamed:@"arrowupblue.png"];
    UIImage *selectedDown   = [UIImage imageNamed:@"arrowdownred.png"];

    if (vote == nil)
    {
        [self.upVoteButton setImage:regularUp
                           forState:UIControlStateNormal];
        [self.downVoteButton setImage:regularDown
                             forState:UIControlStateNormal];
    }
    else if (vote.upvote == NO)
    {
            [self.upVoteButton setImage:regularUp
                               forState:UIControlStateNormal];
            [self.downVoteButton setImage:selectedDown
                                 forState:UIControlStateNormal];
    }
    else if (vote.upvote == YES)
    {
        [self.upVoteButton setImage:selectedUp
                           forState:UIControlStateNormal];
        [self.downVoteButton setImage:regularDown
                             forState:UIControlStateNormal];
    }
    
    [self.scoreLabel setText:[NSString stringWithFormat:@"%ld", [self.object getScore]]];
}

@end
